{"version":3,"sources":["componentes/Header.js","componentes/DrumPad.js","componentes/DrumMachine.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","DrumPad","handleClick","_this","playClip","drumPadContent","document","addEventListener","this","handleKeyPress","removeEventListener","e","preventDefault","pressedKey","getElementById","key","toUpperCase","parentElement","click","_this$props$drumPadCo","id","clipUrl","onClick","src","Component","DrumMachine","display","keyCode","map","componentes_DrumPad","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","play","state","componentes_Header","componentes_DrumMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b4f1155.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = props => {\n    return (\n        <nav className=\"navbar mb-5 shadow text-center\">\n            <h1 className=\"w-100 mt-2 font-weight-bolder display-4 d-none d-md-block\">{props.title}</h1>                    \n            <h1 className=\"w-100 mt-2 font-weight-bolder d-block d-sm-block d-md-none\">{props.title}</h1>                    \n        </nav>\n    );\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass DrumPad extends Component {\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyPress);\n    }        \n \n    handleKeyPress(e) {\n        e.preventDefault();\n        const pressedKey = document.getElementById(e.key.toUpperCase());\n        if (pressedKey != null) {\n            pressedKey.parentElement.click();\n        }\n    }\n\n    handleClick = () => {    \n        this.props.playClip(this.props.drumPadContent);\n    }\n\n    render() { \n\n        const {key, id, clipUrl} = this.props.drumPadContent;\n\n        return (\n            <div className=\"drum-pad col-3 m-2 text-center align-items-center\" id={id} onClick={this.handleClick}>\n                <audio \n                    className=\"clip\"\n                    id={key}\n                    src={clipUrl}\n                />\n                <div className=\"mt-1\">{key}</div>\n            </div>            \n        );\n    }\n}\n\nDrumPad.propTypes = {\n    drumPadContent: PropTypes.object.isRequired,\n    playClip: PropTypes.func.isRequired\n}\n \nexport default DrumPad;","import React from 'react';\nimport DrumPad from './DrumPad';\nimport PropTypes from 'prop-types';\nimport { getDrumPadContent } from '../helper';\n\nconst DrumMachine = props => {\n \n    return (\n        <div className=\"row mx-2\" id=\"drum-machine\">\n            <div className=\"container-fluid col-md-6 offset-md-3\" id=\"keyboard\">\n                <div className=\"row justify-content-center align-items-center p-2 shadow\" id=\"display\">\n                    <span className=\"text-uppercase text-center font-weight-bolder mt-1\">{props.display}</span>\n                </div>\n                <div className=\"row justify-content-around p-3\">\n                    {getDrumPadContent().map(drumPadContent => \n                        <DrumPad \n                            key={drumPadContent.key}\n                            drumPadContent={drumPadContent}\n                            playClip={props.playClip}\n                        />\n                    )}\n                </div>                \n            </div>\n        </div>\n    );\n}\n\nDrumMachine.propTypes = {\n    display: PropTypes.string.isRequired,\n    playClip: PropTypes.func.isRequired\n}\n \nexport default DrumMachine;","export const getDrumPadContent = () => [{\n    key: 'Q',\n    keyCode: 81,\n    id: 'Chord_1',\n    clipUrl: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n  },\n  {\n    key: 'W',\n    keyCode: 87,\n    id: 'Dsc_Oh',\n    clipUrl: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  },\n  {\n    key: 'E',\n    keyCode: 69,\n    id: 'Dry_Ohh',\n    clipUrl: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n  },\n  {\n    key: 'A',\n    keyCode: 65,\n    id: 'Chord_2',\n    clipUrl: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n  },\n  {\n    key: 'S',\n    keyCode: 83,\n    id: 'Kick_n_Hat',\n    clipUrl: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  },\n  {\n    key: 'D',\n    keyCode: 68,\n    id: 'punchy_kick_1',\n    clipUrl: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n  },\n  {\n    key: 'Z',\n    keyCode: 90,\n    id: 'Chord_3',\n    clipUrl: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n  },\n  {\n    key: 'X',\n    keyCode: 88,\n    id: 'RP4_KICK_1',\n    clipUrl: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  },\n  {\n    key: 'C',\n    keyCode: 67,\n    id: 'Brk_Snr',\n    clipUrl: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n  }];\n\n    \n/*\n‘https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n‘https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3’\n‘https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3’\n*/","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport DrumMachine from './componentes/DrumMachine';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      display: 'Let\\'s start'\n    }\n  }\n\n  playClip = drumPadContent => {\n    this.setState({\n      display: drumPadContent.id\n    });\n    const sound = document.getElementById(drumPadContent.key);\n    sound.play(); \n  }\n\n  render() {\n    return (\n      <div className=\"App background\">\n        <Header \n          title=\"Drum Machine\"\n        />      \n        <div className=\"container-fluid\">\n          <DrumMachine \n            display={this.state.display}\n            playClip={this.playClip}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}